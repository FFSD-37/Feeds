<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Daily Usage</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="icon" type="image/*" href="https://ik.imagekit.io/FFSD0037/logo.jpeg?updatedAt=1746701257780">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 70px;
            padding-left: 30px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
        }

        /* Header with timer */
        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 30px;
            border-radius: 20px;
            margin-bottom: 30px;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .header h1 {
            color: #1a202c;
            font-size: 2.5rem;
            font-weight: 700;
            display: flex;
            align-items: center;
            gap: 15px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 10px;
        }

        .header p {
            color: #718096;
            font-size: 1.1rem;
        }

        /* Circular Timer */
        .timer-circle {
            position: relative;
            width: 100px;
            height: 100px;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .timer-circle svg {
            width: 100%;
            height: 100%;
            transform: rotate(0deg);
        }

        #timerText {
            position: absolute;
            font-size: 1.1rem;
            font-weight: 600;
            color: #1a202c;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.08);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
        }

        .stat-label {
            color: #718096;
            font-size: 0.875rem;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 8px;
        }

        .stat-value {
            color: #1a202c;
            font-size: 2rem;
            font-weight: 700;
        }

        .stat-unit {
            color: #a0aec0;
            font-size: 1rem;
            font-weight: 500;
        }

        .chart-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 30px;
            border-radius: 20px;
            margin-bottom: 30px;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
        }

        .chart-title {
            color: #1a202c;
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 20px;
        }

        .chart-container {
            height: 400px;
            position: relative;
        }

        .table-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 30px;
            border-radius: 20px;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .table-wrapper {
            overflow-x: auto;
            border-radius: 10px;
            margin-top: 20px;
        }

        table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
        }

        th {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 16px;
            text-align: left;
            font-weight: 600;
            font-size: 0.875rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        th:first-child {
            border-top-left-radius: 10px;
        }

        th:last-child {
            border-top-right-radius: 10px;
        }

        td {
            padding: 16px;
            border-bottom: 1px solid #e2e8f0;
            color: #2d3748;
            font-size: 0.95rem;
        }

        tr:last-child td {
            border-bottom: none;
        }

        tr:hover td {
            background-color: #f7fafc;
        }

        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #718096;
        }

        .empty-state-icon {
            font-size: 4rem;
            margin-bottom: 20px;
            opacity: 0.5;
        }

        .empty-state-text {
            font-size: 1.25rem;
            font-weight: 500;
        }

        @media (max-width: 768px) {
            .header {
                flex-direction: column;
                gap: 15px;
            }

            .header h1 {
                font-size: 1.75rem;
            }

            .stats-grid {
                grid-template-columns: 1fr;
            }

            .chart-container {
                height: 300px;
            }

            th,
            td {
                padding: 12px 8px;
                font-size: 0.85rem;
            }
        }
    </style>
</head>

<body>
    <div class="container">
        <%- include('sidebar') %>

        <!-- Header with Timer -->
        <div class="header">
            <div>
                <h1>ðŸ“Š Daily Usage Statistics</h1>
                <p>Track your daily usage patterns and trends</p>
            </div>
        </div>

        <% if (user.length === 0) { %>
            <div class="chart-card">
                <div class="empty-state">
                    <div class="empty-state-icon">ðŸ“ˆ</div>
                    <div class="empty-state-text">No usage data available yet</div>
                </div>
            </div>
        <% } else { 
            const dailyData = {};
            let totalHours = 0;
            let maxHours = 0;

            user.forEach(session => {
                const loginDate = new Date(session.loginAt);
                const dateKey = loginDate.toLocaleDateString();
                const durationMs = session.logoutAt - session.loginAt;
                const durationHours = durationMs / (1000 * 60 * 60);

                if (!dailyData[dateKey]) dailyData[dateKey] = 0;
                dailyData[dateKey] += durationHours;
                totalHours += durationHours;
                maxHours = Math.max(maxHours, dailyData[dateKey]);
            });

            const sortedDates = Object.keys(dailyData).sort((a, b) =>
                new Date(a) - new Date(b)
            );

            const avgHours = totalHours / sortedDates.length;
            const totalDays = sortedDates.length;
        %>
            <!-- Stats Grid -->
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-label">Total Usage</div>
                    <div class="stat-value">
                        <%= totalHours.toFixed(1) %>
                        <span class="stat-unit">hours</span>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-label">Average Daily</div>
                    <div class="stat-value">
                        <%= avgHours.toFixed(1) %>
                        <span class="stat-unit">hours</span>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-label">Peak Usage</div>
                    <div class="stat-value">
                        <%= maxHours.toFixed(1) %>
                        <span class="stat-unit">hours</span>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-label">Days Tracked</div>
                    <div class="stat-value">
                        <%= totalDays %>
                        <span class="stat-unit">days</span>
                    </div>
                </div>
            </div>

            <!-- Chart -->
            <div class="chart-card">
                <h2 class="chart-title">Usage Trends</h2>
                <div class="chart-container">
                    <canvas id="usageChart"></canvas>
                </div>
            </div>

            <!-- Data container -->
            <div id="chartData" 
                 data-dates='<%- JSON.stringify(sortedDates) %>'
                 data-values='<%- JSON.stringify(sortedDates.map(date => dailyData[date])) %>'
                 style="display: none;">
            </div>

            <!-- Table -->
            <div class="table-card">
                <h2 class="chart-title">Detailed Breakdown</h2>
                <div class="table-wrapper">
                    <table>
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Total Usage (Hours)</th>
                                <th>Percentage of Average</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% sortedDates.forEach(date => { 
                                const percentage = (dailyData[date] / avgHours * 100).toFixed(0);
                            %>
                                <tr>
                                    <td><strong><%= date %></strong></td>
                                    <td><%= dailyData[date].toFixed(2) %> hrs</td>
                                    <td><%= percentage %>%</td>
                                </tr>
                            <% }) %>
                        </tbody>
                    </table>
                </div>
            </div>
        <% } %>
    </div>

    <% if (user.length > 0) { %>
    <script>
        // Circular Timer - 10 minutes in HH:MM:SS
        const totalSeconds = 10 * 60; // 10 minutes
        let remaining = totalSeconds;
        const circle = document.getElementById('progressCircle');
        const text = document.getElementById('timerText');
        const radius = 45;
        const circumference = 2 * Math.PI * radius;

        circle.style.strokeDasharray = circumference;
        circle.style.strokeDashoffset = 0;

        function updateTimer() {
            const hours = Math.floor(remaining / 3600);
            const minutes = Math.floor((remaining % 3600) / 60);
            const seconds = remaining % 60;

            text.textContent = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;

            const offset = circumference - (remaining / totalSeconds) * circumference;
            circle.style.strokeDashoffset = offset;

            if (remaining <= 0) {
                clearInterval(timer);
                window.location.href = "/login";
            }

            remaining--;
        }

        const timer = setInterval(updateTimer, 1000);
        updateTimer();

        // Chart.js
        const chartData = document.getElementById('chartData');
        const dates = JSON.parse(chartData.dataset.dates);
        const values = JSON.parse(chartData.dataset.values);

        const ctx = document.getElementById('usageChart');

        const gradient = ctx.getContext('2d').createLinearGradient(0, 0, 0, 400);
        gradient.addColorStop(0, 'rgba(102, 126, 234, 0.8)');
        gradient.addColorStop(1, 'rgba(118, 75, 162, 0.4)');

        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: dates,
                datasets: [{
                    label: 'Usage Time (Hours)',
                    data: values,
                    backgroundColor: gradient,
                    borderColor: 'rgba(102, 126, 234, 1)',
                    borderWidth: 2,
                    borderRadius: 8,
                    hoverBackgroundColor: 'rgba(102, 126, 234, 1)'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: true,
                        position: 'top',
                        labels: {
                            font: { size: 14, weight: '500' },
                            color: '#2d3748',
                            padding: 15
                        }
                    },
                    tooltip: {
                        backgroundColor: 'rgba(26, 32, 44, 0.9)',
                        padding: 12,
                        cornerRadius: 8,
                        titleFont: { size: 14, weight: '600' },
                        bodyFont: { size: 13 },
                        callbacks: {
                            label: function(context) {
                                return 'Usage: ' + context.parsed.y.toFixed(2) + ' hours';
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        title: { 
                            display: true, 
                            text: 'Hours',
                            font: { size: 14, weight: '600' },
                            color: '#4a5568'
                        },
                        grid: {
                            color: 'rgba(0, 0, 0, 0.05)'
                        },
                        ticks: {
                            font: { size: 12 },
                            color: '#718096'
                        }
                    },
                    x: {
                        title: { 
                            display: true, 
                            text: 'Date',
                            font: { size: 14, weight: '600' },
                            color: '#4a5568'
                        },
                        grid: { display: false },
                        ticks: {
                            font: { size: 11 },
                            color: '#718096',
                            maxRotation: 45,
                            minRotation: 45
                        }
                    }
                },
                interaction: { intersect: false, mode: 'index' }
            }
        });
    </script>
    <% } %>
</body>

</html>
