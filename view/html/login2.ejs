<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Role-based Login — Professional Portal</title>
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600;700;800&display=swap"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="../css/background.css">
    <style>
      :root {
        --bg1: #f2f6ff;
        --accent: #432fff;
        --accent-2: #08c48c;
        --card-bg: #ffffff;
        --muted: #7b7f86;
      }
      * { box-sizing: border-box; }
      html, body { height: 100%; }
      body {
        margin: 0;
        font-family: Inter, system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
        background: linear-gradient(135deg, #eef1fa 0%, #f7fbff 100%);
        display: flex;
        align-items: flex-start;
        justify-content: center;
        padding: 48px 24px;
        color: #232627;
      }
      .container { width: 100%; max-width: 980px; }
      .heading { text-align: center; margin-bottom: 24px; }
      .heading h1 { margin: 0; font-size: 32px; font-weight: 800; }
      .heading p { color: var(--muted); margin-top: 8px; }

      .alert { margin: 12px auto 18px; max-width: 820px; padding:12px 16px; background:#fff3f0; border-radius:8px; display:none; align-items:center; justify-content:space-between; border:1px solid #f5d6d0; }
      .alert .close-btn { background:transparent; border:0; font-size:18px; cursor:pointer; color:#666; }

      .role-row { display: flex; gap: 18px; align-items: center; justify-content: center; margin: 24px 0 42px; }
      .role-card {
        background: var(--card-bg);
        border-radius: 12px;
        box-shadow: 0 8px 24px rgba(35, 45, 80, 0.08);
        padding: 18px 30px;
        min-width: 210px;
        display: flex;
        gap: 18px;
        align-items: center;
        border: 2px solid transparent;
        cursor: pointer;
        transition: transform 0.18s, box-shadow 0.18s, border-color 0.18s;
      }
      .role-card:hover { transform: translateY(-2px) scale(1.02); box-shadow: 0 12px 30px rgba(36,50,100,0.10); border-color: var(--accent-2); }
      .role-card.active { border-color: var(--accent); background: linear-gradient(180deg, rgba(67,47,255,0.06), rgba(67,47,255,0.03)); box-shadow: 0 18px 40px rgba(43,56,108,0.10); }
      .role-icon { width: 38px; height: 38px; border-radius: 10px; display:flex; align-items:center; justify-content:center; background:#e5e8f2; color:var(--accent); }
      .role-content .title { font-weight:600; font-size:15px; }
      .role-content .desc { font-size:13px; color:var(--muted); }

      .main { display:flex; align-items:flex-start; justify-content:center; }
      .card { width:420px; background:var(--card-bg); border-radius:12px; padding:34px 32px 28px; box-shadow:0 18px 40px rgba(32,40,80,0.06); border:1px solid rgba(0,0,0,0.04); }
      .hero-icon { width:60px; height:60px; border-radius:10px; display:flex; align-items:center; justify-content:center; margin:0 auto 16px; background:#e5e8f2; color:var(--accent); }
      .card h2 { text-align:center; margin:10px 0 22px; font-weight:700; color:#262c37; }

      .form-row { display:flex; flex-direction:column; gap:12px; }
      .field { display:flex; align-items:center; gap:12px; padding:10px 14px; border-radius:8px; border:1px solid rgba(15,20,40,0.07); background:#f8f9fb; }
      .field input { border:0; outline:0; background:transparent; font-size:14px; width:100%; }
      .field label { font-size:13px; color:#666; display:block; margin-bottom:6px; }
      .hint { font-size:12px; color:var(--muted); margin-top:6px; }

      .toggle-group { display:flex; align-items:center; gap:8px; }
      .toggle-btn { padding:6px 14px; border-radius:999px; border:1px solid rgba(15,20,40,0.14); cursor:pointer; background:#f7f8fb; font-size:13px; font-weight:600; color:var(--muted); }
      .toggle-btn.active { background:linear-gradient(180deg,#f0f3ff,#ecedfa); border-color:var(--accent); color:#222; }

      .submit { margin-top:10px; background:linear-gradient(180deg,var(--accent),#2d299b); color:#fff; padding:12px; border-radius:8px; border:0; font-weight:700; cursor:pointer; width:100%; font-size:15px; letter-spacing:0.04em; }
      .submit:hover { opacity:0.96; }

      .password-toggle { background:transparent; border:0; cursor:pointer; font-size:16px; padding:4px; color:#555; user-select:none; }
      .password-toggle:focus { outline: none; }

      .link { display:block; text-align:center; margin-top:14px; color:#3651c9; font-size:14px; text-decoration:none; font-weight:500; }
      .muted-center { text-align:center; color:var(--muted); font-size:14px; margin-top:10px; }

      @media (max-width:600px) {
        .role-row { flex-direction:column; gap:12px; }
        .card { width:100%; padding:20px; }
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="heading">
        <h1>Welcome Back</h1>
        <p>Select your login type below</p>
      </div>

      <div class="alert" role="alert" id="serverAlert">
        <span id="error-msg" class="alert-text"></span>
        <button class="close-btn" onclick="document.getElementById('serverAlert').style.display='none'">&times;</button>
      </div>

      <div class="role-row" role="tablist" aria-label="Choose role">
        <div class="role-card" data-role="kids" tabindex="0">
          <div class="role-icon" aria-hidden>
            <svg width="24" height="24" fill="none" viewBox="0 0 24 24">
              <circle cx="12" cy="8" r="5" stroke="#432fff" stroke-width="2"/>
              <ellipse cx="12" cy="19" rx="7" ry="3.5" stroke="#432fff" stroke-width="2"/>
            </svg>
          </div>
          <div class="role-content">
            <div class="title">Child Account</div>
            <div class="desc">Restricted portal with guardian approval</div>
          </div>
        </div>

        <div class="role-card active" data-role="normal" tabindex="0">
          <div class="role-icon" aria-hidden>
            <svg width="24" height="24" fill="none" viewBox="0 0 24 24">
              <circle cx="12" cy="8" r="5" stroke="#432fff" stroke-width="2"/>
              <path d="M5 21c0-3.866 3.582-7 8-7s8 3.134 8 7" stroke="#432fff" stroke-width="2"/>
            </svg>
          </div>
          <div class="role-content">
            <div class="title">Standard Account</div>
            <div class="desc">Personal login for all users</div>
          </div>
        </div>

        <div class="role-card" data-role="channel" tabindex="0">
          <div class="role-icon" aria-hidden>
            <svg width="24" height="24" fill="none" viewBox="0 0 24 24">
              <rect x="4" y="7" width="16" height="10" rx="3" stroke="#432fff" stroke-width="2"/>
              <path d="M8 21h8" stroke="#432fff" stroke-width="2"/>
            </svg>
          </div>
          <div class="role-content">
            <div class="title">Channel Account</div>
            <div class="desc">Manage communications and teams</div>
          </div>
        </div>
      </div>

      <div class="main">
        <div class="card" id="loginCard">
          <div class="hero-icon" id="heroIcon" aria-hidden>
            <svg width="38" height="38" fill="none" viewBox="0 0 24 24">
              <circle cx="12" cy="8" r="5" stroke="#432fff" stroke-width="2"/>
              <path d="M5 21c0-3.866 3.582-7 8-7s8 3.134 8 7" stroke="#432fff" stroke-width="2"/>
            </svg>
          </div>

          <h2 id="cardTitle">Standard Login</h2>

          <form id="loginForm" novalidate>
            <div class="form-row" id="formFields"></div>
            <button type="submit" class="submit">Sign In</button>
          </form>

          <a class="link" href="/forget-password">Forgot password?</a>
          <div class="muted-center">No account yet? <a href="/signup">Sign up here</a></div>
        </div>
      </div>
    </div>

    <script>
      /* ==========================
         Role switching & rendering
         ========================== */
      const roleCards = document.querySelectorAll('.role-card');
      const cardTitle = document.getElementById('cardTitle');
      const heroIcon = document.getElementById('heroIcon');
      const formFields = document.getElementById('formFields');
      const loginForm = document.getElementById('loginForm');
      const serverAlert = document.getElementById('serverAlert');
      const errorMsg = document.getElementById('error-msg');

      let currentRole = document.querySelector('.role-card.active').dataset.role;
      renderForRole(currentRole);
      setHeroIcon(currentRole);

      // role card click & keyboard
      roleCards.forEach(card => {
        card.addEventListener('click', () => activateCard(card));
        card.addEventListener('keydown', (e) => {
          if (e.key === 'Enter' || e.key === ' ') { e.preventDefault(); activateCard(card); }
        });
      });

      function activateCard(card) {
        roleCards.forEach(c => c.classList.remove('active'));
        card.classList.add('active');
        const role = card.dataset.role;
        currentRole = role;
        setHeroIcon(role);
        if (role === 'kids') cardTitle.textContent = 'Child Account Login';
        else if (role === 'normal') cardTitle.textContent = 'Standard Login';
        else cardTitle.textContent = 'Channel Account Login';
        renderForRole(role);
        hideServerAlert();
      }

      function setHeroIcon(role) {
        const icons = {
          kids: `<svg width="38" height="38" viewBox="0 0 24 24" fill="none"><circle cx="12" cy="8" r="5" stroke="#432fff" stroke-width="2"/><ellipse cx="12" cy="21" rx="7" ry="3.5" stroke="#432fff" stroke-width="2"/></svg>`,
          normal: `<svg width="38" height="38" viewBox="0 0 24 24" fill="none"><circle cx="12" cy="8" r="5" stroke="#432fff" stroke-width="2"/><path d="M5 21c0-3.866 3.582-7 8-7s8 3.134 8 7" stroke="#432fff" stroke-width="2"/></svg>`,
          channel: `<svg width="38" height="38" viewBox="0 0 24 24" fill="none"><rect x="4" y="7" width="16" height="10" rx="3" stroke="#432fff" stroke-width="2"/><path d="M8 21h8" stroke="#432fff" stroke-width="2"/></svg>`
        };
        heroIcon.innerHTML = icons[role] || icons.normal;
      }

      /* ==========================
         Render role-specific fields
         ========================== */
      function renderForRole(role) {
        // clear previous
        formFields.innerHTML = '';

        if (role === 'kids') {
          // Child email + guardian password
          formFields.insertAdjacentHTML('beforeend', `
            <label for="childEmail">Child Email</label>
            <div class="field"><input id="childEmail" name="childEmail" type="email" placeholder="child@domain.com" required autocomplete="email" /></div>

            <label for="parentPassword">Guardian Password</label>
            <div class="field"><input id="parentPassword" name="parentPassword" type="password" placeholder="Parent / Guardian password" required autocomplete="current-password" /></div>

            <div class="hint">A parent or guardian password is required for access.</div>
          `);
        } else if (role === 'normal') {
          // Identifier toggle + password
          formFields.insertAdjacentHTML('beforeend', `
            <div style="display:flex;justify-content:space-between;align-items:center">
              <label style="font-size:13px;color:#666;">Login Identifier</label>
              <div class="toggle-group" style="margin-left:8px">
                <button type="button" class="toggle-btn active" data-mode="email">Email</button>
                <button type="button" class="toggle-btn" data-mode="username">Username</button>
              </div>
            </div>
            <div class="field" style="margin-top:6px"><input name="identifier" type="email" placeholder="user@domain.com" required autocomplete="username" /></div>
            <label style="font-size:13px;color:#666;">Password</label>
            <div class="field"><input name="password" type="password" placeholder="Enter your password" required autocomplete="current-password" /></div>
            <div class="hint">Sign in using either your email address or username.</div>
          `);

          // wire the identifier toggle
          setTimeout(() => {
            const btns = formFields.querySelectorAll('.toggle-btn');
            const input = formFields.querySelector('input[name="identifier"]');
            btns.forEach(b => b.addEventListener('click', () => {
              btns.forEach(x => x.classList.remove('active'));
              b.classList.add('active');
              const mode = b.dataset.mode;
              if (mode === 'username') {
                input.type = 'text';
                input.placeholder = 'your_username';
                input.removeAttribute('pattern');
                input.setAttribute('autocomplete', 'username');
              } else {
                input.type = 'email';
                input.placeholder = 'user@domain.com';
                input.setAttribute('autocomplete', 'email');
              }
            }));
          }, 0);

        } else if (role === 'channel') {
          // Channel admin fields
          formFields.insertAdjacentHTML('beforeend', `
            <label for="channelName">Channel Name</label>
            <div class="field"><input id="channelName" name="channelName" type="text" placeholder="Channel name" required autocomplete="organization" /></div>

            <label for="adminName">Admin Name</label>
            <div class="field"><input id="adminName" name="adminName" type="text" placeholder="Admin full name" required autocomplete="name" /></div>

            <label for="channelPassword">Password</label>
            <div class="field"><input id="channelPassword" name="channelPassword" type="password" placeholder="Enter password" required autocomplete="current-password" /></div>

            <div class="hint">Admin credentials are required to manage channel settings.</div>
          `);
        }

        // (Re)attach password-toggle UI to any password inputs
        attachPasswordToggles();
      }

      /* ==========================
         Password visibility toggle
         ========================== */
      function attachPasswordToggles() {
        // Remove any existing toggles (prevents duplicates when re-rendering)
        formFields.querySelectorAll('.password-toggle').forEach(el => el.remove());

        // Add toggles for each password input within formFields
        const pwFields = formFields.querySelectorAll('input[type="password"]');
        pwFields.forEach(pw => {
          // Create toggle button
          const btn = document.createElement('button');
          btn.type = 'button';
          btn.className = 'password-toggle';
          btn.innerText = '👁️';
          btn.setAttribute('aria-label', 'Show or hide password');

          // style adjustments for placement (button inside .field)
          btn.style.marginLeft = '6px';
          btn.style.background = 'transparent';
          btn.style.border = 'none';
          btn.style.fontSize = '16px';
          btn.style.cursor = 'pointer';
          btn.style.userSelect = 'none';

          // append to the .field container
          const parentField = pw.closest('.field');
          if (!parentField) return;
          parentField.appendChild(btn);

          // event
          btn.addEventListener('click', function () {
            if (pw.type === 'password') {
              pw.type = 'text';
              btn.innerText = '👁️‍🗨️';
            } else {
              pw.type = 'password';
              btn.innerText = '👁️';
            }
          });
        });
      }

      /* ==========================
         Submit handling (keeps backend flow)
         - collects visible form data
         - determines 'type' from active role title
         - includes identifier mode for standard account
         - posts to /atin_job and handles response
         ========================== */
      loginForm.addEventListener('submit', (e) => {
        e.preventDefault();
        // collect form data
        const data = new FormData(loginForm);
        const obj = {};
        for (const [k, v] of data.entries()) obj[k] = v;

        // determine which role card is active
        let type = '';
        for (let i = 0; i < roleCards.length; i++) {
          if (roleCards[i].classList.contains('active')) {
            type = roleCards[i].querySelector('.title').innerText.trim();
            break;
          }
        }

        // determine identifier mode for Standard Account (Email or Username)
        let userTypeiden = '';
        if (type === 'Standard Account') {
          const activeToggle = formFields.querySelector('.toggle-btn.active');
          if (activeToggle) userTypeiden = activeToggle.innerText.trim();
        } else if (type === 'Child Account') {
          userTypeiden = 'parent';
        } else if (type === 'Channel Account') {
          userTypeiden = 'channel';
        }

        // attach metadata
        obj.type = type;
        if (userTypeiden) obj.userTypeiden = userTypeiden;

        // send to backend
        fetch('/atin_job', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(obj)
        })
        .then(res => res.json())
        .then(data => {
          if (data && data.success) {
            // redirect or handle success
            if (data.redirect) window.location.href = data.redirect;
            else window.location.href = '/home';
          } else {
            // show server message in alert
            showServerAlert(data && data.reason ? data.reason : 'Login failed. Please check credentials.');
          }
        })
        .catch(err => {
          console.error('Login error:', err);
          showServerAlert('An error occurred. Please try again.');
        });
      });

      /* ==========================
         Helper: show / hide server alert
         ========================== */
      function showServerAlert(msg) {
        errorMsg.innerHTML = msg;
        serverAlert.style.display = 'flex';
      }
      function hideServerAlert() {
        serverAlert.style.display = 'none';
        errorMsg.innerHTML = '';
      }
    </script>
  </body>
</html>
