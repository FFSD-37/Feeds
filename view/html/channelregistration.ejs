<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Registration</title>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
    />
    <link rel="stylesheet" href="../css/background.css">
    <link rel="stylesheet" href="../css/channelregistration.css" />
    <link rel="icon" type="image/*" href="https://ik.imagekit.io/FFSD0037/logo.jpeg?updatedAt=1746701257780">
  </head>

  <body>
    <%- include("sidebar") %>
    <div class="register-container">
      <div class="register-header">
        <h1>Create Account</h1>
      </div>
      <form id="registerForm" action="/signupChannel" method="POST" novalidate>
        <div class="form-group">
          <label for="channelName">Channel Name</label>
          <input
            type="text"
            id="channelName"
            name="channelName"
            placeholder="Channel name"
            required
          />
          <div class="error-message">Please enter unique Channel name</div>
        </div>
        <div class="form-group">
          <label for="password">Password</label>
          <input
            type="password"
            id="password"
            name="password"
            placeholder="Password"
            title="Password must be at least 6 characters long, include one uppercase letter, one number, and one special character."
            required
          />
          <div class="error-message">Password should be valid</div>
          <span class="password-toggle" id="passwordToggle">üëÅÔ∏è</span>
        </div>

        <div class="form-group">
          <label for="confirmPassword">Confirm Password</label>
          <input
            type="password"
            id="confirmPassword"
            name="confirmPassword"
            placeholder="Password crosscheck"
            required
          />
          <div class="error-message">Password should match</div>
          <span class="password-toggle" id="confirmPasswordToggle">üëÅÔ∏è</span>
        </div>

        <label
          for="multiselect"
          style="display: block; margin-bottom: 8px; font-weight: 500"
          >Select Categories</label
        >
        <div class="multiselect-dropdown">
          <div class="select-box">
            <div class="selected-items"></div>
            <span class="placeholder">Select options...</span>
            <span class="dropdown-arrow"
              ><i class="fas fa-chevron-down"></i
            ></span>
          </div>
          <div class="dropdown-content">
            <div class="search-box">
              <input
                type="text"
                placeholder="Search options..."
                class="search-input"
              />
            </div>
            <ul class="options"></ul>
          </div>
          <input
            type="hidden"
            id="selectedCategories"
            name="selectedCategories"
          />
        </div>
        <input type="hidden" id="profileImageUrl" name="profileImageUrl" />

        <div class="form-group">
          <label for="pfp">Channel Logo (Optional)</label>
          <input type="file" name="pfp" id="pfp" accept="image/*" />
        </div>

        <div class="form-group">
          <label for="channelDescription">Channel Description</label>
          <textarea
            id="channelDescription"
            name="channelDescription"
            rows="4"
            cols="50"
            placeholder="Write your channel description here..."
            required
          ></textarea>
        </div>
        <div class="checkbox-group">
          <label>
            <input type="checkbox" id="terms" required />
            I agree to the
            <a href="#" onclick="openOverlay(event)">Terms & Conditions</a>
          </label>
          <div class="error-message">You must agree to the terms</div>
        </div>

        <button type="submit" class="submit-btn">Create Account</button>
      </form>
    </div>
    <div class="overlay" id="overlay">
      <button
        class="close-btn"
        onclick="document.getElementById('overlay').classList.remove('show-overlay')"
      >
        X
      </button>
      <h1>Terms & Conditions</h1>
      <div class="content">
        <h2>1. Introduction</h2>
        <p>
          Welcome to Feeds! By using our platform, you agree to these terms and
          conditions.
        </p>

        <h2>2. User Category info</h2>
        <h3>1. Kids</h3>
        <pre>
1. Education
2. Animation
3. Nature</pre
        >
        <h3>2. Students</h3>
        <pre>All</pre>
        <p><strong>Last Updated: February 2025</strong></p>
      </div>
    </div>

    <script>
      const form = document.getElementById("registerForm");
      const passwordInput = document.getElementById("password");
      const confirmPasswordInput = document.getElementById("confirmPassword");
      const passwordToggle = document.getElementById("passwordToggle");
      const confirmPasswordToggle = document.getElementById(
        "confirmPasswordToggle"
      );
      const selectedCategoriesInput = document.getElementById("selectedCategories");
      const imageupload = document.getElementById('pfp');

      const validatePassword = (password) => {
        return (
          password.length >= 6 &&
          /[A-Z]/.test(password) &&
          /[0-9]/.test(password) &&
          /[!@#$%^&*(),.?":{}|<>]/.test(password)
        );
      };

      document.querySelectorAll(".password-toggle").forEach((toggle) => {
        toggle.addEventListener("click", () => {
          const input = toggle.previousElementSibling.previousElementSibling;
          if (input.type === "password") {
            input.type = "text";
            toggle.textContent = "üëÅÔ∏è‚Äçüó®Ô∏è";
          } else {
            input.type = "password";
            toggle.textContent = "üëÅÔ∏è";
          }
        });
      });

      form.addEventListener("submit", (e) => {
        const passwordValid = validatePassword(form.password.value);
        const passwordsMatch =
          form.password.value === form.confirmPassword.value;
        const termsValid = form.terms.checked;

        // Show/hide errors
        document.querySelector("#password + .error-message").style.display =
          passwordValid ? "none" : "block";
        document.querySelector(
          "#confirmPassword + .error-message"
        ).style.display = passwordsMatch ? "none" : "block";
        document.querySelector("#terms ~ .error-message").style.display =
          termsValid ? "none" : "block";

        passwordValid
          ? passwordInput.classList.remove("error")
          : passwordInput.classList.add("error");
        passwordsMatch
          ? confirmPasswordInput.classList.remove("error")
          : confirmPasswordInput.classList.add("error");

        if (!passwordValid || !passwordsMatch || !termsValid) {
          return;
        }

        form.submit();
      });

      async function getAuth() {
        let res = await fetch('/imagKitauth')
        return res;
      }

      imageupload.addEventListener('change', handleUpload);
      async function handleUpload() {
        const authResponse = await getAuth();

        if (!authResponse.ok) throw new Error("Failed to fetch auth details");

        const authData = await authResponse.json();
        var imagekit = new ImageKit({
          publicKey: "public_wbpheuS28ohGGR1W5QtPU+uv/z8=",
          urlEndpoint: "https://ik.imagekit.io/lidyx2zxm/",
        });

        var file = document.getElementById("pfp");
        imagekit.upload({
          file: file.files[0],
          fileName: file.files[0].name || "sample-file.jpg",
          tags: ["tag1"],
          responseFields: "tags",
          token: authData.token,
          signature: authData.signature,
          expire: authData.expire,
        }, function (err, result) {
          if (err) {
            console.log(err);
          } else {
            document.getElementById("profileImageUrl").value = result.url;
            console.log(result);
          }
        });
      }

      function openOverlay(event) {
        event.preventDefault();
        document.getElementById("overlay").classList.add("show-overlay");
      }

      document.addEventListener("DOMContentLoaded", function () {
        const optionsData = [
          { value: "All", label: "All" },
          { value: "Education", label: "Education" },
          { value: "Animations", label: "Animations" },
          { value: "Games", label: "Games" },
          { value: "Memes", label: "Memes" },
          { value: "News", label: "News" },
          { value: "Tech", label: "Tech" },
          { value: "Vlog", label: "Vlog" },
          { value: "Entertainment", label: "Entertainment" },
          { value: "Sports", label: "Sports" },
          { value: "Nature", label: "Nature" },
          { value: "Music", label: "Music" },
          { value: "Marketing", label: "Marketing" },
          { value: "Fitness", label: "Fitness" },
          { value: "Lifestyle", label: "Lifestyle" },
        ];

        const multiselect = document.querySelector(".multiselect-dropdown");
        const selectBox = multiselect.querySelector(".select-box");
        const selectedItems = multiselect.querySelector(".selected-items");
        const placeholder = multiselect.querySelector(".placeholder");
        const dropdownContent = multiselect.querySelector(".dropdown-content");
        const searchInput = multiselect.querySelector(".search-input");
        const optionsList = multiselect.querySelector(".options");

        let selectedValues = [];
        let isOpen = false;

        function initDropdown() {
          renderOptions(optionsData);
          updateSelectedItems();

          selectBox.addEventListener("click", function (e) {
            e.stopPropagation();
            toggleDropdown();
          });

          document.addEventListener("click", function () {
            if (isOpen) {
              closeDropdown();
            }
          });

          searchInput.addEventListener("input", function () {
            const searchTerm = this.value.toLowerCase();
            const filteredOptions = optionsData.filter((option) =>
              option.label.toLowerCase().includes(searchTerm)
            );
            renderOptions(filteredOptions);
          });
        }

        function toggleDropdown() {
          if (isOpen) {
            closeDropdown();
          } else {
            openDropdown();
          }
        }

        function openDropdown() {
          multiselect.classList.add("open");
          isOpen = true;
          setTimeout(() => {
            searchInput.focus();
          }, 0);
        }

        function closeDropdown() {
          multiselect.classList.remove("open");
          isOpen = false;
          searchInput.value = "";
          renderOptions(optionsData);
        }

        function renderOptions(options) {
          optionsList.innerHTML = "";

          if (options.length === 0) {
            optionsList.innerHTML =
              '<div class="no-options">No options found</div>';
            return;
          }

          options.forEach((option) => {
            const li = document.createElement("li");
            li.className = "option";
            if (selectedValues.includes(option.value)) {
              li.classList.add("selected");
            }

            li.innerHTML = `
                        <input type="checkbox" ${
                          selectedValues.includes(option.value) ? "checked" : ""
                        } 
                            data-value="${option.value}">
                        <span>${option.label}</span>
                    `;

            li.addEventListener("click", function (e) {
              if (e.target.tagName !== "INPUT") {
                const checkbox = this.querySelector("input");
                checkbox.checked = !checkbox.checked;
                handleOptionChange(checkbox);
              }
            });

            const checkbox = li.querySelector("input");
            checkbox.addEventListener("change", function () {
              handleOptionChange(this);
            });

            optionsList.appendChild(li);
          });
        }

        function handleOptionChange(checkbox) {
          const value = checkbox.getAttribute("data-value");

          if (checkbox.checked) {
            if (!selectedValues.includes(value)) {
              selectedValues.push(value);
            }
          } else {
            selectedValues = selectedValues.filter((v) => v !== value);
          }

          updateSelectedItems();
          updateHiddenInput();
          renderOptions(optionsData);
        }

        function updateHiddenInput() {
          selectedCategoriesInput.value = JSON.stringify(selectedValues);
        }

        function updateSelectedItems() {
          selectedItems.innerHTML = "";

          if (selectedValues.length === 0) {
            placeholder.style.display = "block";
            return;
          }

          placeholder.style.display = "none";

          selectedValues.forEach((value) => {
            const option = optionsData.find((o) => o.value === value);
            if (option) {
              const item = document.createElement("div");
              item.className = "selected-item";
              item.innerHTML = `
                            ${option.label}
                            <i class="fas fa-times" data-value="${value}"></i>
                        `;
              selectedItems.appendChild(item);
            }
          });

          selectedItems.querySelectorAll(".fa-times").forEach((btn) => {
            btn.addEventListener("click", function (e) {
              e.stopPropagation();
              const value = this.getAttribute("data-value");
              selectedValues = selectedValues.filter((v) => v !== value);
              updateSelectedItems();
              updateHiddenInput();
              renderOptions(optionsData);
            });
          });
        }

        initDropdown();
      });
    </script>
    <script src="https://unpkg.com/imagekit-javascript/dist/imagekit.min.js"></script>
  </body>
</html>
