<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Chat App</title>
    <script
      type="module"
      src="https://cdn.jsdelivr.net/npm/emoji-picker-element@^1/index.js"
    ></script>
    <style>
      :root {
        --bg: #ffffff;
        --fg: #000000;
        --bubble-sent: #4f93f7;
        --bubble-recv: #e0e0e0;
      }

      .dark {
        --bg: #1e1e1e;
        --fg: #f5f5f5;
        --bubble-sent: #1a73e8;
        --bubble-recv: #333;
      }

      body {
        margin: 0;
        font-family: sans-serif;
        background: var(--bg);
        color: var(--fg);
        display: flex;
        height: 100vh;
      }

      .chatList {
        width: 25%;
        background: #f0f0f0;
        padding: 10px;
        overflow-y: auto;
      }

      .chatList.dark {
        background: #2a2a2a;
      }

      .user {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 10px;
        cursor: pointer;
      }

      .user img {
        width: 32px;
        height: 32px;
        border-radius: 50%;
      }

      .chat-area {
        flex: 1;
        display: flex;
        flex-direction: column;
      }

      .messages {
        flex: 1;
        padding: 20px;
        overflow-y: auto;
        background-image: url("https://img.freepik.com/free-vector/night-ocean-landscape-full-moon-stars-shine_107791-7397.jpg?semt=ais_hybrid&w=740");
        background-size: cover;
      }

      .message {
        max-width: 60%;
        padding: 10px 15px;
        margin-bottom: 10px;
        border-radius: 16px;
        word-break: break-word;
        backdrop-filter: blur(3px);
      }

      .sent {
        align-self: flex-end;
        background: var(--bubble-sent);
        color: white;
        margin-left: auto;
      }

      .received {
        align-self: flex-start;
        background: var(--bubble-recv);
        color: black;
        margin-right: auto;
      }

      .timestamp {
        font-size: 10px;
        opacity: 0.6;
        text-align: right;
      }

      .input-area {
        display: flex;
        padding: 10px;
        background: var(--bg);
        border-top: 1px solid #ccc;
      }

      .input-area button#emoji-btn {
        background: none;
        font-size: 20px;
        padding: 0 10px;
      }

      .input-area input {
        flex: 1;
        padding: 10px;
        border-radius: 20px;
        border: 1px solid #ccc;
      }

      .input-area button {
        padding: 10px 20px;
        border: none;
        margin-left: 10px;
        background: var(--bubble-sent);
        color: white;
        border-radius: 20px;
        cursor: pointer;
      }

      .toggle-dark {
        position: absolute;
        top: 10px;
        right: 10px;
        background: #444;
        color: white;
        padding: 5px 10px;
        border: none;
        border-radius: 12px;
        cursor: pointer;
      }
    </style>
  </head>
  <body class="" id="body">
    <%- include("sidebar") %>
    <div class="chatList" id="user-list">
      <div class="me"><%= currUser %></div>
      <% friends.forEach(friend => { %>
      <div class="user">
        <img src="<%= friend.avatarUrl %>" alt="" />
        <span><%= friend.username %></span>
      </div>
      <% }) %>
    </div>

    <div class="chat-area">
      <div class="messages" id="chat-box"></div>
      <div class="input-area">
        <input type="text" id="message-input" placeholder="Type a message..." />
        <button id="emoji-btn">ðŸ˜Š</button>
        <button id="send-btn">Send</button>
      </div>
      <emoji-picker
        style="position: absolute; bottom: 60px; right: 100px; display: none"
        id="emoji-picker"
      ></emoji-picker>
    </div>

    <button class="toggle-dark" id="toggle-theme">ðŸŒ™</button>

    <script src="https://cdn.socket.io/4.7.2/socket.io.min.js"></script>
    <script>

      const currentUser = document.querySelector('.me').textContent;
      document.querySelector('.me').remove();
      let activeUser;

      const userList = document.getElementById("user-list");
      const chatBox = document.getElementById("chat-box");
      const messageInput = document.getElementById("message-input");
      const sendBtn = document.getElementById("send-btn");
      const toggleBtn = document.getElementById("toggle-theme");
      const body = document.getElementById("body");
      const users=document.querySelectorAll('.user');

      users.forEach(user => {
        user.addEventListener('click', () => {
          activeUser = user.children[1].textContent;
          loadMessages(activeUser);
        })
      })

        const socket = io("http://localhost:8000", {
          withCredentials: true
        });
        
        socket.on("connect", () => {
          console.log("Connected to server");
        });

      function appendMessage(text, type, time) {
        const msg = document.createElement("div");
        msg.className = `message ${type}`;
        msg.innerHTML = `<div>${text}</div><div class="timestamp">${time}</div>`;
        chatBox.appendChild(msg);
        chatBox.scrollTop = chatBox.scrollHeight;
      }

      async function loadMessages(activeUser) {
        chatBox.innerHTML = "";
        const res = await fetch(
          `http://localhost:3000/chat/${activeUser}`,
          { method: "GET", credentials: "include", headers: { 'Content-Type': 'application/json' } }
        );
        let messages = await res.json();console.log(messages.chats);
        messages = messages.chats;
        if(!messages.length) return;
        messages
          .filter((m) => m.from === activeUser || m.from === currentUser)
          .forEach((m) =>
            appendMessage(
              m.text,
              m.from === currentUser ? "sent" : "received",
              m.createdAt
            )
          );
      }

      sendBtn.addEventListener("click", () => {
        const text = messageInput.value.trim();
        if (!text) return;
        const time = new Date().toLocaleTimeString([], {
          hour: "2-digit",
          minute: "2-digit",
        });
        socket.emit("sendMessage", {
          to: activeUser,
          text,
          time,
        });
        appendMessage(text, "sent", time);
        console.log(activeUser);
        
        messageInput.value = "";
      });

      socket.on("receiveMessage", (msg) => {
        if (msg.from === activeUser) {
          appendMessage(msg.text, "received", msg.time);
        }
      });

      toggleBtn.addEventListener("click", () => {
        body.classList.toggle("dark");
        document.querySelector(".chatList").classList.toggle("dark");
      });

      const emojiBtn = document.getElementById("emoji-btn");
      const emojiPicker = document.getElementById("emoji-picker");

      emojiBtn.addEventListener("click", () => {
        emojiPicker.style.display =
          emojiPicker.style.display === "none" ? "block" : "none";
      });

      emojiPicker.addEventListener("emoji-click", (e) => {
        messageInput.value += e.detail.unicode;
      });
    </script>
  </body>
</html>
